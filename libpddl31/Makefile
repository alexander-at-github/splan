CC=clang
AR=ar

CFLAGS=#-dNDEBUG #-g # for debug symbols

# path to the ANTLR3 runtime.
# Both versions do work
ANTLR3.4_C_RUNTIME__OLD=:/usr/lib/libantlr3c.so # specifies file explicity
ANTLR3.4_C_RUNTIME=antlr3c 	# linker will search the library path for a file
							# called libantlr3c.a (and libantlr3c.so?).

BUILD_DIR=build
BIN_DIR=bin
SRC_DIR=src
TOOL_DIR=tool

STRUCTS_HEADER_FILE=$(SRC_DIR)/c/pddl31structs.h
LEXER_OBJ_FILE=$(BUILD_DIR)/pddl31Lexer.o
LEXER_HEADER_FILE=$(BUILD_DIR)/pddl31Lexer.h
LEXER_CORE_OBJ_FILE=$(BUILD_DIR)/pddl31_pddl31core.o
PARSER_OBJ_FILE=$(BUILD_DIR)/pddl31Parser.o
PARSER_HEADER_FILE=$(BUILD_DIR)/pddl31Parser.h
LIB_OBJ_FILE=$(BUILD_DIR)/libpddl31.o
LIB_HEADER_FILE=$(SRC_DIR)/c/libpddl31.h
LIB_FILE=$(BIN_DIR)/libpddl31.a

#all: $(ANTLR3_C_FILES)
#all: $(LEXER_OBJ_FILE) $(PARSER_OBJ_FILE)
all: $(LIB_FILE)

$(BUILD_DIR):
	mkdir -p $@

# The -make switch in the antlr3 command should cause it to only build if
# generated files are older than grammar.
# TODO: When integrating with Makefiles, utilize the -depend option of the Antlr tool, which should tell your Makefile what the grammar files generate.
# OLD:
#$(ANTLR3_C_FILES): $(SRC_DIR)/antlr3/pddl31.g $(SRC_DIR)/antlr3/pddl31core.g $(BUILD_DIR)
#	java -jar $(TOOL_DIR)/antlr-3.4-complete.jar -make -fo $(BUILD_DIR) $<

PDDL31_G_COMMAND=java -jar $(TOOL_DIR)/antlr-3.4-complete.jar -make -fo $(BUILD_DIR) $<

# Dependencies generated by antlr3 with the -depend command line option.
$(SRC_DIR)/antlr3/pddl31.g: $(SRC_DIR)/antlr3/pddl31core.g
$(BUILD_DIR)/pddl31Parser.c : $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)
$(BUILD_DIR)/pddl31.tokens : $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)
$(PARSER_HEADER_FILE): $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)
$(BUILD_DIR)/pddl31Lexer.c : $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)
$(LEXER_HEADER_FILE) : $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)
$(BUILD_DIR)/pddl31_pddl31core.c : $(SRC_DIR)/antlr3/pddl31.g
	$(PDDL31_G_COMMAND)

$(LEXER_OBJ_FILE): $(BUILD_DIR)/pddl31Lexer.c $(BUILD_DIR)/pddl31Lexer.h
	$(CC) $(CFLAGS) -c -I$(BUILD_DIR) -I$(SRC_DIR)/c -o $@ $<

$(LEXER_CORE_OBJ_FILE): $(BUILD_DIR)/pddl31_pddl31core.c $(BUILD_DIR)/pddl31_pddl31core.h
	$(CC) $(CFLAGS) -c -I$(BUILD_DIR) -I$(SRC_DIR)/c -o $@ $<

$(PARSER_OBJ_FILE): $(BUILD_DIR)/pddl31Parser.c $(BUILD_DIR)/pddl31Parser.h
	$(CC) $(CFLAGS) -c -I$(BUILD_DIR) -I$(SRC_DIR)/c -o $@ $<

$(LIB_OBJ_FILE): $(SRC_DIR)/c/libpddl31.c $(LEXER_HEADER_FILE) $(PARSER_HEADER_FILE)
	$(CC) $(CFLAGS) -c -I$(BUILD_DIR) -I$(SRC_DIR)/c -o $@ $<

$(LIB_FILE): $(LIB_OBJ_FILE) $(LEXER_OBJ_FILE) $(LEXER_CORE_OBJ_FILE) $(PARSER_OBJ_FILE)
	mkdir -p $(BIN_DIR)
	$(AR) rcs $@ $^
	cp $(LIB_HEADER_FILE) $(STRUCTS_HEADER_FILE) $(BIN_DIR)

clean:
	rm -rf $(BUILD_DIR) $(BIN_DIR)

### TODO ###
# clang -c -Ibuild -Isrc/c -o build/libpddl31.o src/c/libpddl31.c


# Testing

build/test_types: src/c/types.c test/c/types.c $(BUILD_DIR)
	$(CC) $(CFLAGS) -I$(SRC_DIR)/c -o $@ -I$(TOOL_DIR) src/c/types.c test/c/types.c 

bin/test: $(SRC_DIR)/c/main_test.c $(LIB_FILE)
	$(CC) -o $@ -I$(BIN_DIR) -l$(ANTLR3.4_C_RUNTIME) $^

#test-main: src/c/main_test.c $(LIB_FILE)
#	clang -o $(BIN_DIR) -I$(BUILD_DIR) $< -l$(LIB_FILE) -l/usr/lib/libantlr3c.so


